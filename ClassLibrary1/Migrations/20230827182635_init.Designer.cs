// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TakeCare.Database.Data;

#nullable disable

namespace TakeCare.Database.Migrations
{
    [DbContext(typeof(TakeCareDBContext))]
    [Migration("20230827182635_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TakeCare.Database.Entity.Address", b =>
                {
                    b.Property<int>("Address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Address_id"));

                    b.Property<string>("Address_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_postal_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Address_id");

                    b.ToTable("AddressTable");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Doctor", b =>
                {
                    b.Property<int>("Doctor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_id"));

                    b.Property<string>("Doctor_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Doctor_id");

                    b.HasIndex("User_id");

                    b.ToTable("DoctorTable");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Examination", b =>
                {
                    b.Property<int>("Examination_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Examination_id"));

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Examination_date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Examination_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Examination_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Examination_result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Examination_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_id")
                        .HasColumnType("int");

                    b.HasKey("Examination_id");

                    b.HasIndex("Doctor_id");

                    b.HasIndex("Patient_id");

                    b.ToTable("ExaminationTable");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Patient", b =>
                {
                    b.Property<int>("Patient_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Patient_id"));

                    b.Property<int>("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("Patient_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patient_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Patient_id");

                    b.HasIndex("Address_id");

                    b.HasIndex("UserId");

                    b.ToTable("PatientTable");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.User", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_id"));

                    b.Property<string>("User_Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Visit", b =>
                {
                    b.Property<int>("Visit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Visit_id"));

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("Patient_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Visit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Visit_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Visit_id");

                    b.HasIndex("Doctor_id");

                    b.HasIndex("Patient_id");

                    b.ToTable("VisitTable");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Doctor", b =>
                {
                    b.HasOne("TakeCare.Database.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Examination", b =>
                {
                    b.HasOne("TakeCare.Database.Entity.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("Doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeCare.Database.Entity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Patient", b =>
                {
                    b.HasOne("TakeCare.Database.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeCare.Database.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Visit", b =>
                {
                    b.HasOne("TakeCare.Database.Entity.Doctor", "Doctor")
                        .WithMany("Visits")
                        .HasForeignKey("Doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TakeCare.Database.Entity.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("Patient_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Doctor", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("TakeCare.Database.Entity.Patient", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
